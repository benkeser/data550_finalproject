load("~/Capstone_2024/Trajectory_Inference/tradeSEQ.RData")
options(warn=-1)
suppressMessages(
{
library(tradeSeq)
library(RColorBrewer)
library(SingleCellExperiment)
library(slingshot)
library(Seurat)
library(Signac)
library(dplyr)
library(monocle3)
library(tidyverse)
library(SeuratWrappers)
library(ggplot2)
library(ggridges)
library(DESeq2)
library(magrittr)
library(here)
}
)
here::i_am("./Trajectory_Inference/tradeSEQ.Rmd")
control_seurat <- readRDS(here::here("Multiome-project/control_seurat.rds"))
DimPlot(control_seurat, label = TRUE)
DefaultAssay(control_seurat) <- "SCT"
Idents(control_seurat) <- "cell_type"
# only keep meshenchymal cells
control_seurat <- subset(x = control_seurat, idents = c("4", "5", "6", "7", "8", "9", "10", "11", "12","13", "14"))
DimPlot(control_seurat, label = TRUE)
counts <- as.matrix(control_seurat[["SCT"]]$counts)
celltype <- control_seurat@meta.data[["cell_type"]]
pd <- data.frame(cells = colnames(counts), cellType = celltype)
rownames(pd) <- pd$cells
#First display, coloring by the cell types from Paul et al
plot_cells(cds_control, label_groups_by_cluster = FALSE, cell_size = 1,
color_cells_by = "cell_type") + theme(legend.position = "right")
# save as cell data set
cds_control <- as.cell_data_set(control_seurat)
saveRDS(cds_control , file = here::here("Trajectory_Inferrence/cds_control.rds"))
setwd("~/Capstone_2024")
# save as cell data set
cds_control <- as.cell_data_set(control_seurat)
saveRDS(cds_control , file = here::here("Trajectory_Inferrence/cds_control.rds"))
# save as cell data set
cds_control <- as.cell_data_set(control_seurat)
saveRDS(cds_control , file = here::here("./Trajectory_Inferrence/cds_control.rds"))
# save as cell data set
cds_control <- as.cell_data_set(control_seurat)
saveRDS(cds_control , file = here::here("/Trajectory_Inferrence/cds_control.rds"))
# save as cell data set
cds_control <- as.cell_data_set(control_seurat)
saveRDS(cds_control , file = here::here("./Trajectory_Inferrence/cds_control.rds"))
# save as cell data set
cds_control <- as.cell_data_set(control_seurat)
saveRDS(cds_control , file = here::here("Trajectory_Inferrence/cds_control.rds"))
# save as cell data set
cds_control <- as.cell_data_set(control_seurat)
saveRDS(cds_control , file = here::here("Trajectory_Inferrence", "cds_control.rds"))
# save as cell data set
cds_control <- as.cell_data_set(control_seurat)
saveRDS(cds_control , file = "Trajectory_Inferrence/cds_control.rds")
# save as cell data set
cds_control <- as.cell_data_set(control_seurat)
saveRDS(cds_control , file = "./Trajectory_Inferrence/cds_control.rds")
# save as cell data set
cds_control <- as.cell_data_set(control_seurat)
saveRDS(cds_control , file = "/Trajectory_Inferrence/cds_control.rds")
setwd("~/Capstone_2024")
# save as cell data set
cds_control <- as.cell_data_set(control_seurat)
saveRDS(cds_control , file = "/Trajectory_Inference/cds_control.rds")
# save as cell data set
cds_control <- as.cell_data_set(control_seurat)
saveRDS(cds_control , file = "./Trajectory_Inference/cds_control.rds")
# save as cell data set
cds_control <- as.cell_data_set(control_seurat)
saveRDS(cds_control , file = "cds_control.rds")
counts <- as.matrix(control_seurat[["SCT"]]$counts)
celltype <- control_seurat@meta.data[["cell_type"]]
pd <- data.frame(cells = colnames(counts), cellType = celltype)
rownames(pd) <- pd$cells
counts <- as.matrix(control_seurat[["SCT"]]$counts)
celltype <- control_seurat@meta.data[["cell_type"]]
pd <- data.frame(cells = colnames(counts), cellType = celltype)
rownames(pd) <- pd$cells
#First display, coloring by the cell types from Paul et al
plot_cells(cds_control, label_groups_by_cluster = FALSE, cell_size = 1,
color_cells_by = "cell_type") + theme(legend.position = "right")
head(counts)
pd$cells
colnames(counts)
control_seurat@meta.data[["cell_type"]]
counts
View(counts)
View(pd)
control_seurat[["SCT"]]$counts
control_seurat@meta.data[["cell_type"]]
genes_of_interest <- c("Wnt2", "Fgf10", "Vegf", "Egf", "Bmp4", "Cxcl12", "Acta2", "Wt1")
counts[, genes_of_interest]
str(control_seurat[["SCT"]]$counts)
str(counts)
counts[genes_of_interest,]
counts[1]
counts[[1]]
counts[rownames(counts) %in% genes_of_interest, ]
# Running the clustering method. This is necessary to the construct the graph
cds_control <- cluster_cells(cds_control, reduction_method = "UMAP")
# Visualize the clusters
plot_cells(cds_control, color_cells_by = "cluster", cell_size = 1) + theme(legend.position = "right")
# Construct the graph
# Note that, for the rest of the code to run, the graph should be fully connected
cds_control <- learn_graph(cds_control, use_partition = FALSE, close_loop = FALSE)
# We find all the cells that are close to the starting point
cell_ids <- colnames(cds_control)[pd$cellType ==  "8"]
closest_vertex <- cds_control@principal_graph_aux[["UMAP"]]$pr_graph_cell_proj_closest_vertex
closest_vertex <- as.matrix(closest_vertex[colnames(cds_control), ])
closest_vertex <- closest_vertex[cell_ids, ]
closest_vertex <- as.numeric(names(which.max(table(closest_vertex))))
mst <- principal_graph(cds_control)$UMAP
root_pr_nodes <- igraph::V(mst)$name[closest_vertex]
# We compute the trajectory
cds_control <- order_cells(cds_control, root_pr_nodes = root_pr_nodes)
plot_cells(cds_control, color_cells_by = "pseudotime")
# Get the closest vertice for every cell
y_to_cells <-  principal_graph_aux(cds_control)$UMAP$pr_graph_cell_proj_closest_vertex %>%
as.data.frame()
y_to_cells$cells <- rownames(y_to_cells)
y_to_cells$Y <- y_to_cells$V1
# Get the root vertices
# It is the same node as above
root <- cds_control@principal_graph_aux$UMAP$root_pr_nodes
root <-cds_control@principal_graph_aux$UMAP$root_pr_nodes
# Get the other endpoints
endpoints <- names(which(igraph::degree(mst) == 1))
endpoints <- endpoints[!endpoints %in% root]
# For each endpoint
cellWeights <- lapply(endpoints, function(endpoint) {
# We find the path between the endpoint and the root
path <- igraph::shortest_paths(mst, root, endpoint)$vpath[[1]]
path <- as.character(path)
# We find the cells that map along that path
df <- y_to_cells[y_to_cells$Y %in% path, ]
df <- data.frame(weights = as.numeric(colnames(cds_control) %in% df$cells))
colnames(df) <- endpoint
return(df)
}) %>% do.call(what = 'cbind', args = .) %>%
as.matrix()
rownames(cellWeights) <- colnames(cds_control)
pseudotime <- matrix(pseudotime(cds_control), ncol = ncol(cellWeights),
nrow = ncol(cds_control), byrow = FALSE)
sum(rowSums(cellWeights) == 0)
str(pseudotime)
str(pseudotime)
str(cellWeights)
str(counts)
str(pseudotime)
str(cellWeights)
genes_of_interest <- c("Wnt2", "Fgf10", "Vegf", "Egf", "Bmp4", "Cxcl12", "Acta2", "Wt1")
sub_counts <- counts[rownames(counts) %in% genes_of_interest, ]
str(sub_counts)
str(counts)
str(pseudotime)
str(cellWeights)
rownames(counts)
rownames(counts) %in% "Lgfbp5"
View(pseudotime)
setwd("~/Documents/APE_2023")
load("~/Documents/APE_2023/code/environment/04_metapone_env.RData")
View(C18_C1)
View(C18_cluster2)
cluster1_C18_vec <- C18_C1[!grepl("^X[0-9]", C18_C1$Node),] %>% arrange(desc(centrality_vec)) %>% rename(mz_time = Name)
cluster2_C18_vec <- C18_C2[!grepl("^X[0-9]", C18_C2$Node),] %>% arrange(desc(centrality_vec)) %>% rename(mz_time = Name)
cluster3_C18_vec <- C18_C3[!grepl("^X[0-9]", C18_C3$Node),] %>% arrange(desc(centrality_vec)) %>% rename(mz_time = Name)
View(cluster1_C18_vec)
View(C18_C1)
514-297
cluster1_C18_pest <- C18_C1[grepl("^X[0-9]", C18_C1$Node),] %>% arrange(desc(centrality_vec)) %>% rename(mz_time = Name)
View(cluster1_C18_pest)
cluster2_C18_pest <- C18_C2[grepl("^X[0-9]", C18_C2$Node),] %>% arrange(desc(centrality_vec)) %>% rename(mz_time = Name)
cluster3_C18_pest <- C18_C3[grepl("^X[0-9]", C18_C3$Node),] %>% arrange(desc(centrality_vec)) %>% rename(mz_time = Name)
View(cluster2_C18_pest)
View(cluster3_C18_pest)
setwd("~/Capstone_2024")
load("~/Capstone_2024/Trajectory_Inference/tradeSEQ.RData")
counts_trt <- readRDS("counts_ctr.rds")
setwd("~/DATA550")
library(knitr)
opts_chunk$set(
echo = FALSE, warning = FALSE, message = FALSE
)
here::i_am("finalproject_report.Rmd")
seurat <- readRDS(file = here::here("data/seurat.rds"))
here::i_am(
"code/03_render_report.R"
)
setwd("~/DATA550/final_project")
here::i_am(
"code/03_render_report.R"
)
rmarkdown::render(
here::here("report.Rmd")
)
rmarkdown::render(
here::here("finalproject_report.Rmd")
)
View(sig1_SCT)
View(seurat)
seurat <- subset(seurat, idents = "1")
saveRDS(seurat, file = here::here("data/seurat.rds"))
# load seurat data
seurat <- readRDS(file = here::here("data/seurat.rds"))
View(seurat)
# Add a column in the metadata to contain the cell type number and whether it is treatment or control
# Cluster to that column
seurat$cell_name <- paste(seurat$cell_type, seurat$batch, sep = "_")
Idents(seurat) <- "cell_name"
de_result <- FindMarkers(seurat, ident.1 = "1_control", ident.2 = "1_treated", verbose = FALSE)
seurat_full <- readRDS("~/Capstone_2024/seurat/seurat.rds")
View(sig1_ATAC)
View(seurat_full)
x <- subset(seurat_full, idents = c("1", "2", "3"))
de_result <- FindMarkers(x, ident.1 = "1_control", ident.2 = "1_treated", verbose = FALSE)
x$cell_name <- paste(x$cell_type, x$batch, sep = "_")
Idents(x) <- "cell_name"
de_result <- FindMarkers(x, ident.1 = "1_control", ident.2 = "1_treated", verbose = FALSE)
PrepSCTFindMarkers(x, assay = "SCT", verbose = TRUE)
de_result <- FindMarkers(x, ident.1 = "1_control", ident.2 = "1_treated", verbose = FALSE)
PrepSCTFindMarkers(seurat, assay = "SCT", verbose = TRUE)
de_result <- FindMarkers(seurat, ident.1 = "1_control", ident.2 = "1_treated", verbose = FALSE)
de_result <- FindMarkers(seurat_full, ident.1 = "1_control", ident.2 = "1_treated", verbose = FALSE)
Idents(seurat_full) <- "cell_name"
de_result <- FindMarkers(seurat_full, ident.1 = "1_control", ident.2 = "1_treated", verbose = FALSE)
seurat_full$cell_name <- paste(seurat_full$cell_type, seurat_full$batch, sep = "_")
Idents(seurat_full) <- "cell_name"
de_result <- FindMarkers(seurat_full, ident.1 = "1_control", ident.2 = "1_treated", verbose = FALSE)
x <- subset(seurat_full, idents = c("1", "2", "3"))
Idents(x) <- "cell_name"
View(x)
PrepSCTFindMarkers(x, assay = "SCT", verbose = TRUE)
de_result <- FindMarkers(x, ident.1 = "1_control", ident.2 = "1_treated", verbose = FALSE)
x <- PrepSCTFindMarkers(x, assay = "SCT", verbose = TRUE)
de_result <- FindMarkers(x, ident.1 = "1_control", ident.2 = "1_treated", verbose = FALSE)
library(sctransform)
x <- PrepSCTFindMarkers(x, assay = "SCT", verbose = TRUE)
de_result <- FindMarkers(x, ident.1 = "1_control", ident.2 = "1_treated", verbose = FALSE)
computeSumFactors(x)
colSums(assay(x))
x$cell_name <- paste(x$cell_type, x$batch, sep = "_")
Idents(x) <- "cell_name"
x <- PrepSCTFindMarkers(x, assay = "SCT", verbose = TRUE)
de_result <- FindMarkers(x, ident.1 = "1_control", ident.2 = "1_treated", verbose = FALSE)
x <- subset(seurat_full, idents = c("1", "2", "3", "4"))
PrepSCTFindMarkers(seurat, assay = "SCT", verbose = TRUE)
PrepSCTFindMarkers(seurat_full, assay = "SCT", verbose = TRUE)
seurat$cell_name <- paste(seurat$cell_type, seurat$batch, sep = "_")
Idents(seurat) <- "cell_name"
de_result <- FindMarkers(seurat, ident.1 = "1_control", ident.2 = "1_treated", verbose = FALSE)
PrepSCTFindMarkers(seurat, assay = "SCT", verbose = TRUE)
de_result <- FindMarkers(seurat, ident.1 = "1_control", ident.2 = "1_treated", verbose = FALSE)
de_result <- FindMarkers(seurat, ident.1 = "1_control", ident.2 = "1_treated", verbose = FALSE, recorrect_umi = FALSE)
rm(x)
rm(seurat_full)
de_result$gene <- row.names(de_result)
sig_genes <- de_result$gene[which(de_result$p_val < 0.05)]
sig1_SCT <- de_result[de_result$gene %in% sig_genes[1:10], c('gene','avg_log2FC', 'p_val')]
row.names(sig1_SCT) <- NULL
sig1_SCT <- sig1_SCT %>%
mutate(`p_val` = ifelse(`p_val` < 0.01, "<0.01", `p_val`))
View(seurat)
